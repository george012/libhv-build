name: Cross-platform Build and Release

env:
  ProductName: libhv

on:
  push:
    tags:
      - v*

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.step_create_release.outputs.upload_url }}
    steps:
      - name: install github-cli
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: CheckOut
        uses: actions/checkout@v3

      - name: Check Old Version
        run: |
          APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) \
          && echo APP_OLD_VERSION=v$((${APP_VERSION:1}-2)) >> ${GITHUB_ENV}

      - name: Delete Old Version
        run: |
          gh release delete ${{ env.APP_OLD_VERSION }} -y
          git push origin --delete ${{ env.APP_OLD_VERSION }}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create Release
        id: step_create_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: build-linux
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install libssl-dev libnghttp2-dev tree
          mkdir -p ./libhv/build_libs

      - name: build x86_64
        run: |
          cd libhv
          mkdir build-x86_64 && cd build-x86_64
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OSX_ARCHITECTURES="x86_64"
          make -j$(nproc) VERBOSE=1

      - name: build arm64
        run: |
          cd libhv
          mkdir build-arm64 && cd build-arm64
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OSX_ARCHITECTURES="arm64"
          make -j$(nproc) VERBOSE=1

      - name: merge libs
        run: |
          cd ./libhv/build_libs
          ld -shared -o libhv.so ../libhv/build-arm64/lib/libhv.so ../libhv/build-x86_64/lib/libhv.so

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/libhv.so
          asset_name: libhv_linux_x64_arm64.so
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: build-windows
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          choco install -y openssl.light
          make -p ./libhv/build_libs

      - name: build x64
        run: |
          cd libhv
          mkdir cmake-build-win64
          cd cmake-build-win64
          cmake .. -G "Visual Studio 17 2022" -A x64  -DCMAKE_BUILD_TYPE=Release
          cmake --build .

      - name: build arm64
        run: |
          cd libhv
          mkdir cmake-build-arm64
          cd cmake-build-arm64
          cmake .. -G "Visual Studio 17 2022" -A ARM64 -DCMAKE_BUILD_TYPE=Release
          cmake --build .

      - name: merge DLLs
        run: |
          cd ./libhv/build_libs
          lib.exe /out:hv.dll ../cmake-build-win64/bin/hv.dll ../cmake-build-arm64/bin/hv.dll libssl-1_1.dll libcrypto-1_1.dll

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/hv.dll
          asset_name: hv_windows_x64.dll
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-apple:
    name: build-apple
    needs: create-release
    runs-on: macos-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: build
        run: |
          cd libhv
          ./configure
          make libhv evpp examples unittest

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/lib/libhv.dylib
          asset_name: libhv_macos_x64.dylib
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: build-android
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install -y wget zip unzip tar tree

      - name: Install Android NDK
        run: |
          mkdir -p $HOME/android-sdk/ndk
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME/android-sdk/ndk
          rm ndk.zip
          export ANDROID_NDK_HOME=$HOME/android-sdk/ndk
          export PATH=$PATH:$ANDROID_NDK_HOME
          mkdir -p libhv/build_libs

      - name: Build dynamic library for Android-armv7a
        run: |
          cd libhv
          mkdir -p build-android-armv7a && cd build-android-armv7a
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=armeabi-v7a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared
          make
          mv ./lib/libhv.so ../build_libs/libhv_armv7a.so

      - name: Build dynamic library for Android-armv8a-arm64
        run: |
          cd libhv
          mkdir -p build-android-armv8a-arm64 && cd build-android-armv8a-arm64
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared
          make
          mv ./lib/libhv.so ../build_libs/libhv_armv8a.so

      - name: Build dynamic library for Android-x86_64
        run: |
          cd libhv
          mkdir -p build-android-x86_64 && cd build-android-x86_64
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=x86_64 -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared
          make
          mv ./lib/libhv.so ../build_libs/libhv_x86_64.so

      - name: Merge shared libraries into one shared library
        run: |
          cd libhv/build_libs
          $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/ld -shared -o libhv.so ../build-android-armv7a/lib/libhv.so ../build-android-armv8a-arm64/lib/libhv.so ../build-android-x86_64/lib/libhv.so

      - name: Upload the .so file as a release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/libhv.so
          asset_name: libhv-android.so
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
