name: Cross-platform Build and Release

env:
  ProductName: libhv

on:
  push:
    tags:
      - v*

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.step_create_release.outputs.upload_url }}
    steps:
      - name: install github-cli
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y
      - name: CheckOut
        uses: actions/checkout@v3

      - name: Check Old Version
        run: |
          APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) \
          && echo APP_OLD_VERSION=v$((${APP_VERSION:1}-2)) >> ${GITHUB_ENV}

      - name: Delete Old Version
        run: |
          gh release delete ${{ env.APP_OLD_VERSION }} -y
          git push origin --delete ${{ env.APP_OLD_VERSION }}
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Create Release
        id: step_create_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: build-linux
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install libssl-dev libnghttp2-dev tree

      - name: build
        run: |
          echo upUrl===${{ needs.create-release.outputs.upload_url }}
          cd libhv
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          make -j$(nproc) VERBOSE=1
          make install

      # - name: test
      #   run: |
      #     cd libhv
      #     make check
      #     make run-unittest

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build/install/lib/libhv.so
          asset_name: libhv_linux_x64.so
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: build-windows
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          choco install -y openssl.light

      - name: build
        run: |
          cd libhv
          mkdir cmake-build-win64
          cd cmake-build-win64
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build .

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/cmake-build-win64/bin/Debug/hv.dll
          asset_name: hv_windows_x64.dll
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-apple:
    runs-on: macos-latest     # 在 macOS 环境下运行
    strategy:                 # 使用策略来配置编译参数
      matrix:                # 使用矩阵来配置不同的编译参数
        xcode: ["12.0"]      # Xcode 版本为 12.0
        sdk: ["11.0"]        # SDK 版本为 11.0
        arch: ["x86_64", "arm64"]   # 编译的架构包括 x86_64 和 arm64，以支持 M1 芯片的编译
    steps:                    # 步骤
      - name: Checkout        # 名称为 Checkout 的步骤，使用 actions/checkout 动作来检出代码
        uses: actions/checkout@v2

      - name: Install Dependencies  # 名称为 Install Dependencies 的步骤，用来安装依赖
        if: runner.os == 'macOS'   # 仅在 macOS 系统上运行
        run: |
          brew update# 
          brew install cmake openssl libsodium

      - name: Configure & Build   # 名称为 Configure & Build 的步骤，用来配置和构建 libhv 库
        run: |
          mkdir build && cd build
          cmake .. \
          && -DBUILD_SHARED_LIBS=ON \
          && -DCMAKE_BUILD_TYPE=Release \
          && -DENABLE_ASAN=OFF \
          && -DENABLE_UBSAN=OFF \
          && -DENABLE_TEST=OFF \
          && -DENABLE_COVERAGE=OFF \
          && -DENABLE_EXAMPLE=OFF \
          && -DENABLE_OPENSSL=ON \
          && -DENABLE_LIBSODIUM=ON \
          && -DENABLE_HTTP2=ON \
          && -DENABLE_CJSON=ON \
          && -DENABLE_HPROSE=ON \
          && -DENABLE_QUICKLZ=ON \
          && -DENABLE_ZLIB=ON \
          && -DENABLE_LZ4=ON \
          && -DENABLE_BROTLI=ON \
          && -DENABLE_GZIP=ON \
          && -DENABLE_DEFLATE=ON \
          && -DENABLE_WEBSOCKET=ON \
          && -DENABLE_MBEDTLS=OFF

        - name: Upload dynamic library as release asset
          uses: actions/upload-release-asset@v1
          if: ${{ github.ref_type == 'tag' }}
          with:
            upload_url: ${{ needs.create-release.outputs.upload_url }}
            asset_path: ./libhv/lib/libhv.dylib
            asset_name: libhv_macos_x64.dylib
            asset_content_type: application/x-sharedlib
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: build-android
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install -y wget zip unzip tar tree

      - name: Install Android NDK
        run: |
          mkdir -p $HOME/android-sdk/ndk
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME/android-sdk/ndk
          rm ndk.zip
          export ANDROID_NDK_HOME=$HOME/android-sdk/ndk
          export PATH=$PATH:$ANDROID_NDK_HOME

      - name: Build dynamic library for Android
        run: |
          cd libhv
          mkdir -p build-android
          cd build-android
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared
          make
          zip -j libhv_android_arm64-v8a.zip ./lib/libhv.so

      - name: Upload the .zip file as a release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build-android/libhv_android_arm64-v8a.zip
          asset_name: libhv_android_arm64-v8a.zip
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

