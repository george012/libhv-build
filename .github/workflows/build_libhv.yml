name: Cross-platform Build libhv

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *' # 每 4 小时检查一次

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ env.upload_url }}
      NEED_BUILD: ${{ env.NEED_BUILD }}
      REMOTE_LATEST_VERSION: ${{ env.REMOTE_LATEST_VERSION }}
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v3

      - name: Check if build is required
        id: check-build-need
        run: |
          wget --no-check-certificate https://raw.githubusercontent.com/george012/gt_script/master/github_repo_version_scan.sh
          chmod a+x ./github_repo_version_scan.sh
          build_need=$(./github_repo_version_scan.sh --check_need_update github.com/$GITHUB_REPOSITORY github.com/ithewei/libhv)
          remote_latest_version=$(./github_repo_version_scan.sh --get_latest_version github.com/ithewei/libhv)
          echo "NEED_BUILD=$build_need" >> $GITHUB_ENV
          echo "REMOTE_LATEST_VERSION=$remote_latest_version" >> $GITHUB_ENV
        env:
          NEED_BUILD: $build_need
          REMOTE_LATEST_VERSION: $remote_latest_version

      - name: Check for existing release
        if: ${{ env.NEED_BUILD }} == "true"
        id: check-release-existing
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            const existing_release = response.data.find(release => release.tag_name === "${{ env.REMOTE_LATEST_VERSION }}");
            if (existing_release) {
              console.log("Existing release found:", existing_release.tag_name);
              return "false";
            } else {
              console.log("No existing release found");
              return "true";
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set NEED_BUILD
        run: |
          if [ "${{ steps.check-release-existing.outputs.result }}" == "true" ]; then
            echo "NEED_BUILD=true" >> $GITHUB_ENV
          else
            echo "NEED_BUILD=false" >> $GITHUB_ENV
            upload_url=$(./github_repo_version_scan.sh --get_latest_upload_url github.com/$GITHUB_REPOSITORY)
            echo "upload_url=$remote_latest_version" >> $GITHUB_ENV
          fi

      - name: Set up Git
        if: ${{ env.NEED_BUILD }} == "true"
        run: |
          git config --local user.email "${{ secrets.GITCONFIG_EMAIL }}"
          git config --local user.name "${{ secrets.GITCONFIG_NAME }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Bump version and push tag
        id: tag-version
        if: ${{ env.NEED_BUILD }} == "true"
        uses: mathieudutour/github-tag-action@v6.1
        with:
          tag_prefix: ""
          custom_tag: ${{ env.REMOTE_LATEST_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Step GitHub release
        id: step-create-release
        if: ${{ env.NEED_BUILD }} == "true"
        uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: 'true'
          tag: ${{ steps.tag-version.outputs.new_tag }}
          name: ${{ steps.tag-version.outputs.new_tag }}

      - name: handle Upload Url
        run: |
          if [ "${{ env.NEED_BUILD }}" == "true" ]; then
            echo "upload_url=${{ steps.step-create-release.outputs.upload_url }}" >> $GITHUB_ENV
          else
            upload_url=$(./github_repo_version_scan.sh --get_latest_upload_url github.com/$GITHUB_REPOSITORY)
            echo "upload_url=$upload_url" >> $GITHUB_ENV
          fi

  build-linux:
    name: build-linux  
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == "true"
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Handle ENV PATH
        run: |
          echo "NEED_BUILD=${{ needs.create-release.outputs.NEED_BUILD }}" >> $GITHUB_ENV
          echo "REMOTE_LATEST_VERSION=${{ needs.create-release.outputs.REMOTE_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "upload_url=${{ needs.create-release.outputs.upload_url }}" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install libssl-dev libnghttp2-dev
          mkdir -p ./libhv/build_libs

      - name: build x86_64
        run: |
          cd libhv
          mkdir build-x86_64 && cd build-x86_64
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OSX_ARCHITECTURES="x86_64"
          make -j$(nproc) VERBOSE=1

      - name: build arm64
        run: |
          cd libhv
          mkdir build-arm64 && cd build-arm64
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OSX_ARCHITECTURES="arm64"
          make -j$(nproc) VERBOSE=1

      - name: merge libs
        run: |
          cd ./libhv/build_libs
          mkdir -p ./lbhv/include
          ld -shared -o ./lbhv/libhv.so ../build-arm64/lib/libhv.so ../build-x86_64/lib/libhv.so
          cp ../include/hv/* ./lbhv/include
          zip -q -r libhv_linux_x64_arm64.zip ./lbhv
          echo "over_file_name=libhv_linux_x64_arm64.zip" >> $GITHUB_ENV

      - name: Check for existing asset
        id: check_asset_existing
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ env.REMOTE_LATEST_VERSION }}"
            });
            const existing_asset = response.data.assets.find(asset => asset.name === "${{ env.over_file_name }}");
            if (existing_asset) {
              console.log("Existing asset found:", existing_asset.name);
              return false;
            } else {
              console.log("No existing asset found");
              return true;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dynamic library as release asset
        if: ${{ steps.check_asset_existing.outputs.result }} == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/${{ env.over_file_name }}
          asset_name: ${{ env.over_file_name }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  build-windows:
    name: build-windows
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == "true"
    needs: create-release
    runs-on: windows-2022
    permissions:
      contents: write
    steps:
      - name: Handle ENV PATH
        run: |
          echo "NEED_BUILD=${{ needs.create-release.outputs.NEED_BUILD }}" >> $GITHUB_ENV
          echo "REMOTE_LATEST_VERSION=${{ needs.create-release.outputs.REMOTE_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "upload_url=${{ needs.create-release.outputs.upload_url }}" >> $GITHUB_ENV
  
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          choco install -y openssl.light tree cmake
          mkdir -p libhv/build_libs

      - name: build x86_64
        run: |
          cd libhv
          mkdir cmake-build-win64 && cd cmake-build-win64
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build .

      - name: build arm64
        run: |
          cd libhv
          mkdir cmake-build-arm64 && cd cmake-build-arm64
          cmake .. -G "Visual Studio 17 2022" -A ARM64
          cmake --build .

      - name: merge DLLs
        run: |
          cd libhv/build_libs
          mkdir -p libhv/include
          mkdir -p libhv/x64
          mkdir -p libhv/arm64
          cp ../cmake-build-win64/bin/Debug/hv.dll libhv/x64/
          cp ../cmake-build-arm64/bin/Debug/hv.dll libhv/arm64/
          cp ../include/hv/* ./lbhv/include
          7z a libhv_windows_x64_arm64.zip ./libhv
          zip -q -r libhv_windows_x64_arm64.zip ./lbhv
          echo "over_file_name=libhv_windows_x64_arm64.zip" >> $GITHUB_ENV

      - name: Check for existing asset
        id: check_asset_existing
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ env.REMOTE_LATEST_VERSION }}"
            });
            const existing_asset = response.data.assets.find(asset => asset.name === "${{ env.over_file_name }}");
            if (existing_asset) {
              console.log("Existing asset found:", existing_asset.name);
              return false;
            } else {
              console.log("No existing asset found");
              return true;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dynamic library as release asset
        if: ${{ steps.check_asset_existing.outputs.result }} == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/${{ env.over_file_name }}
          asset_name: ${{ env.over_file_name }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-apple:
    name: build-apple
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == "true"
    runs-on: macos-latest
    needs: create-release
    permissions:
      contents: write
    env:
      HOMEBREW_NO_AUTO_UPDATE: true
    steps:
      - name: Handle ENV PATH
        run: |
          echo "NEED_BUILD=${{ needs.create-release.outputs.NEED_BUILD }}" >> $GITHUB_ENV
          echo "REMOTE_LATEST_VERSION=${{ needs.create-release.outputs.REMOTE_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "upload_url=${{ needs.create-release.outputs.upload_url }}" >> $GITHUB_ENV
  
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          brew install openssl@1.1 nghttp2 cmake
          mkdir -p libhv/build_libs

      - name: build x86_64 and arm64
        run: |
          cd libhv
          build() {
            arch=$1
            mkdir -p build-$arch && cd build-$arch
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_OSX_ARCHITECTURES="$arch"
            make -j$(sysctl -n hw.physicalcpu) VERBOSE=1
            make install
            cd ..
          }
          build x86_64
          build arm64

      - name: merge dylibs and fix @rpath
        run: |
          cd libhv/build_libs
          mkdir -p ./lbhv/include
          lipo -create -output libhv.dylib ../build-x86_64/install/lib/libhv.dylib ../build-arm64/install/lib/libhv.dylib
          install_name_tool -id @rpath/libhv.dylib libhv.dylib
          install_name_tool -change /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib @rpath/libssl.1.1.dylib libhv.dylib
          install_name_tool -change /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib @rpath/libcrypto.1.1.dylib libhv.dylib
          install_name_tool -change /usr/local/opt/nghttp2/lib/libnghttp2.14.dylib @rpath/libnghttp2.14.dylib libhv.dylib
          cp ../include/hv/* ./lbhv/include
          mv ./libhv.dylib ./libhv/
          zip -q -r libhv_osx_x64_arm64.zip ./lbhv
          echo "over_file_name=libhv_osx_x64_arm64.zip" >> $GITHUB_ENV

      - name: Check for existing asset
        id: check_asset_existing
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ env.REMOTE_LATEST_VERSION }}"
            });
            const existing_asset = response.data.assets.find(asset => asset.name === "${{ env.over_file_name }}");
            if (existing_asset) {
              console.log("Existing asset found:", existing_asset.name);
              return false;
            } else {
              console.log("No existing asset found");
              return true;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dynamic library as release asset
        if: ${{ steps.check_asset_existing.outputs.result }} == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/${{ env.over_file_name }}
          asset_name: ${{ env.over_file_name }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: build-android
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == "true"
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Handle ENV PATH
        run: |
          echo "NEED_BUILD=${{ needs.create-release.outputs.NEED_BUILD }}" >> $GITHUB_ENV
          echo "REMOTE_LATEST_VERSION=${{ needs.create-release.outputs.REMOTE_LATEST_VERSION }}" >> $GITHUB_ENV
          echo "upload_url=${{ needs.create-release.outputs.upload_url }}" >> $GITHUB_ENV
  
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install -y wget zip unzip tar tree

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      - name: Install Android NDK
        run: |
          mkdir -p $HOME/android-sdk/ndk
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME/android-sdk/ndk
          rm ndk.zip
          export ANDROID_NDK_HOME=$HOME/android-sdk/ndk
          export PATH=$PATH:$ANDROID_NDK_HOME
          mkdir -p libhv/build_libs

      - name: install Android Cmake-Tool-Chain
        run: |
          sudo $ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh --arch=arm --platform=android-21 --install-dir=/opt/ndk/arm
          sudo $ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh --arch=arm64 --platform=android-21 --install-dir=/opt/ndk/arm64
          sudo $ANDROID_NDK_HOME/build/tools/make-standalone-toolchain.sh --arch=x86_64 --platform=android-21 --install-dir=/opt/ndk/x86_64

      - name: Build dynamic library for Android-armv7a
        run: |
          cd libhv
          export PATH=/opt/ndk/arm/bin:$PATH
          export CROSS_COMPILE=arm-linux-androideabi-
          ./configure
          make clean
          make libhv
          cp ./lib/libhv.so ./build_libs/libhv-armeabi-v7a.so

      - name: Build dynamic library for Android-armv8a-arm64
        run: |
          cd libhv
          export PATH=/opt/ndk/arm64/bin:$PATH
          export CROSS_COMPILE=aarch64-linux-android-
          ./configure
          make clean
          make libhv
          # 在编译后，将产出文件移动到指定的目录
          mkdir -p ./build_libs/
          cp ./lib/libhv.so ./build_libs/libhv-arm64-v8a.so

      - name: Build dynamic library for Android-x86_64
        run: |
          cd libhv
          export PATH=/opt/ndk/x86_64/bin:$PATH
          export CROSS_COMPILE=x86_64-linux-android-
          ./configure
          make clean
          make libhv
          cp ./lib/libhv.so ./build_libs/libhv-x86_x64.so

      - name: Zip the .so files
        run: |
          cd libhv/build_libs
          mkdir -p libhv/include
          mv libhv-armeabi-v7a.so ./libhv
          mv libhv-arm64-v8a.so ./libhv
          mv libhv-x86_x64.so ./libhv
          cp ../include/hv/* ./lbhv/include
          zip -q -r libhv_android_v7a_v8a_x64.zip ./lbhv
          echo "over_file_name=libhv_android_v7a_v8a_x64.zip" >> $GITHUB_ENV

      - name: Check for existing asset
        id: check_asset_existing
        uses: actions/github-script@v5
        with:
          script: |
            const response = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "${{ env.REMOTE_LATEST_VERSION }}"
            });
            const existing_asset = response.data.assets.find(asset => asset.name === "${{ env.over_file_name }}");
            if (existing_asset) {
              console.log("Existing asset found:", existing_asset.name);
              return false;
            } else {
              console.log("No existing asset found");
              return true;
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload dynamic library as release asset
        if: ${{ steps.check_asset_existing.outputs.result }} == 'true'
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/${{ env.over_file_name }}
          asset_name: ${{ env.over_file_name }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
