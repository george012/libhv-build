name: Cross-platform Build libhv

on:
  workflow_dispatch:
  schedule:
    - cron: '0 * * * *' # 每小时检查一次

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.step_create_release.outputs.upload_url }}
      NEED_BUILD: ${{ steps.check-build-need.outputs.NEED_BUILD }}
      REMOTE_LATEST_VERSION: ${{ steps.check-build-need.outputs.REMOTE_LATEST_VERSION }}
    steps:
      - name: Checkout Current Repository
        uses: actions/checkout@v3

      - name: Check if build is required
        id: check-build-need
        run: |
          wget --no-check-certificate https://raw.githubusercontent.com/george012/gt_script/master/github_repo_version_scan.sh
          chmod a+x ./github_repo_version_scan.sh
          build_need=$(./github_repo_version_scan.sh --check_need_update github.com/$GITHUB_REPOSITORY github.com/ithewei/libhv)
          remote_latest_version=$(./github_repo_version_scan.sh --get_latest_version github.com/ithewei/libhv)
          echo "NEED_BUILD=$build_need" >> $GITHUB_ENV
          echo "REMOTE_LATEST_VERSION=$remote_latest_version" >> $GITHUB_ENV
        env:
          NEED_BUILD: $build_need
          REMOTE_LATEST_VERSION: $remote_latest_version

      - name: Set up Git
        if: ${{ env.NEED_BUILD }} == 'true'
        run: |
          git config --local user.email "${{ secrets.GITCONFIG_EMAIL }}"
          git config --local user.name "${{ secrets.GITCONFIG_NAME }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create a new Git tag
        id: create-new-tag
        if: ${{ env.NEED_BUILD }} == 'true'
        run: |
          git tag ${{ env.REMOTE_LATEST_VERSION }}
          git push origin ${{ env.REMOTE_LATEST_VERSION }}

      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash

      - name: Step Create Release
        id: step_create_release
        if: ${{ env.NEED_BUILD }} == 'true'
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: build-linux  
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == 'true'
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install libssl-dev libnghttp2-dev
          mkdir -p ./libhv/build_libs

      - name: build x86_64
        run: |
          cd libhv
          mkdir build-x86_64 && cd build-x86_64
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OSX_ARCHITECTURES="x86_64"
          make -j$(nproc) VERBOSE=1

      - name: build arm64
        run: |
          cd libhv
          mkdir build-arm64 && cd build-arm64
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DCMAKE_OSX_ARCHITECTURES="arm64"
          make -j$(nproc) VERBOSE=1

      - name: merge libs
        run: |
          cd ./libhv/build_libs
          ld -shared -o libhv.so ../build-arm64/lib/libhv.so ../build-x86_64/lib/libhv.so

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/libhv.so
          asset_name: libhv_linux_x64_arm64.so
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: build-windows
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == 'true'
    needs: create-release
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          choco install -y openssl.light tree
          mkdir -p libhv/build_libs

      - name: build x86_64
        run: |
          cd libhv
          mkdir cmake-build-win64 && cd cmake-build-win64
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build .

      - name: build arm64
        run: |
          cd libhv
          mkdir cmake-build-arm64 && cd cmake-build-arm64
          cmake .. -G "Visual Studio 17 2022" -A ARM64
          cmake --build .

      - name: merge DLLs
        shell: cmd
        run: |
          tree
          cd libhv/build_libs
          call "%VS_2022_PATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
          lib /OUT:hv.lib ..\cmake-build-win64\Debug\hv.lib ..\cmake-build-arm64\Debug\hv.lib

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/hv.lib
          asset_name: hv_windows_x64_arm64.lib
          asset_content_type: application/x-archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-apple:
    name: build-apple
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == 'true'
    runs-on: macos-latest
    needs: create-release
    permissions:
      contents: write
    env:
      HOMEBREW_NO_AUTO_UPDATE: true
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          brew install openssl@1.1 nghttp2 cmake
          mkdir -p libhv/build_libs

      - name: build x86_64 and arm64
        run: |
          cd libhv
          build() {
            arch=$1
            mkdir -p build-$arch && cd build-$arch
            cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_OSX_ARCHITECTURES="$arch"
            make -j$(sysctl -n hw.physicalcpu) VERBOSE=1
            make install
            cd ..
          }
          build x86_64
          build arm64

      - name: merge dylibs and fix @rpath
        run: |
          cd libhv/build_libs
          lipo -create -output libhv.dylib ../build-x86_64/install/lib/libhv.dylib ../build-arm64/install/lib/libhv.dylib
          install_name_tool -id @rpath/libhv.dylib libhv.dylib
          install_name_tool -change /usr/local/opt/openssl@1.1/lib/libssl.1.1.dylib @rpath/libssl.1.1.dylib libhv.dylib
          install_name_tool -change /usr/local/opt/openssl@1.1/lib/libcrypto.1.1.dylib @rpath/libcrypto.1.1.dylib libhv.dylib
          install_name_tool -change /usr/local/opt/nghttp2/lib/libnghttp2.14.dylib @rpath/libnghttp2.14.dylib libhv.dylib

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/libhv.dylib
          asset_name: libhv_macos_x64_arm64.dylib
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: build-android
    if: ${{ needs.create-release.outputs.NEED_BUILD }} == 'true'
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install -y wget zip unzip tar tree

      - name: Install Android NDK
        run: |
          mkdir -p $HOME/android-sdk/ndk
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME/android-sdk/ndk
          rm ndk.zip
          export ANDROID_NDK_HOME=$HOME/android-sdk/ndk
          export PATH=$PATH:$ANDROID_NDK_HOME
          mkdir -p libhv/build_libs

      - name: Build dynamic library for Android-armv7a
        run: |
          cd libhv
          mkdir -p build-android-armv7a && cd build-android-armv7a
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=armeabi-v7a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared -DCMAKE_LIBRARY_OUTPUT_NAME=libhv-armeabi-v7a
          make
          cp ./lib/libhv-armeabi-v7a.so ../build_libs

      - name: Build dynamic library for Android-armv8a-arm64
        run: |
          cd libhv
          mkdir -p build-android-armv8a-arm64 && cd build-android-armv8a-arm64
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared -DCMAKE_LIBRARY_OUTPUT_NAME=libhv-arm64-v8a
          make
          cp ./lib/libhv-arm64-v8a.so ../build_libs

      - name: Build dynamic library for Android-x86_64
        run: |
          cd libhv
          mkdir -p build-android-x86_64 && cd build-android-x86_64
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI=x86_64 -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared -DCMAKE_LIBRARY_OUTPUT_NAME=libhv-x86_x64
          make
          cp ./lib/libhv-x86_x64.so ../build_libs

      - name: Zip the .so files
        run: |
          cd libhv/build_libs
          zip libhv_android_all_archs.zip libhv-armeabi-v7a.so libhv-arm64-v8a.so libhv-x86_x64.so

      - name: Upload the .zip file as a release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./libhv/build_libs/libhv_android_all_archs.zip
          asset_name: libhv_android_all_archs.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}