name: Cross-platform Build and Release

env:
  ProductName: libhv

on:
  push:
    tags:
      - build_*

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: step_create_release
        uses: ncipollo/release-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    name: build-linux
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install libssl-dev libnghttp2-dev

      - name: build
        run: |
          echo upUrl===${{ needs.steps.step_create_release.outputs.upload_url }}
          cd libhv
          mkdir build && cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON
          make -j$(nproc) VERBOSE=1
          make install

      - name: test
        run: |
          cd libhv
          make check
          make run-unittest

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.steps.step_create_release.outputs.upload_url }}
          asset_path: ./libhv/build/libhv.so
          asset_name: libhv_linux_x64.so
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    name: build-windows
    needs: create-release
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          choco install -y openssl.light

      - name: build
        run: |
          cd libhv
          mkdir cmake-build-win64
          cd cmake-build-win64
          cmake .. -G "Visual Studio 17 2022" -A x64
          cmake --build .

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.steps.step_create_release.outputs.upload_url }}
          asset_path: ./libhv/cmake-build-win64/Release/hv.dll
          asset_name: hv_windows_x64.dll
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-apple:
    name: build-apple
    needs: create-release
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: build
        run: |
          cd libhv
          ./configure
          make libhv evpp examples unittest

      - name: Upload dynamic library as release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.steps.step_create_release.outputs.upload_url }}
          asset_path: ./libhv/libhv/.libs/libhv.dylib
          asset_name: libhv_macos_x64.dylib
          asset_content_type: application/x-sharedlib
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: build-android
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: install dependencies
        run: |
          sudo apt update
          sudo apt install -y build-essential cmake git
          sudo apt install -y wget zip unzip tar

      - name: Install Android NDK
        run: |
          mkdir -p $HOME/android-sdk/ndk
          wget -q https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ndk.zip
          unzip -q ndk.zip -d $HOME/android-sdk/ndk
          rm ndk.zip
          export ANDROID_NDK_HOME=$HOME/android-sdk/ndk
          export PATH=$PATH:$ANDROID_NDK_HOME

      - name: Build dynamic library for Android
        run: |
          echo kast$ANDROID_NDK_HOME
          echo cast$ANDROID_NDK_HOME/build
          cd libhv
          mkdir -p build-android
          cd build-android
          cmake .. -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DANDROID_ABI=arm64-v8a -DANDROID_NATIVE_API_LEVEL=21 -DANDROID_STL=c++_shared
          make
          zip -j libhv_android_arm64-v8a.zip ./build-android/libhv.so

      - name: Upload the .zip file as a release asset
        uses: actions/upload-release-asset@v1
        if: ${{ github.ref_type == 'tag' }}
        with:
          upload_url: ${{ needs.steps.step_create_release.outputs.upload_url }}
          asset_path: ./libhv/build-android/libhv_android_arm64-v8a.zip
          asset_name: libhv_android_arm64-v8a.zip
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

