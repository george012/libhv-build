name: build

env:
  ProductName: libhv

on:
  push:
    tags:
      - 'build_*'

jobs:
  CreateRelease:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: GitHub Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false

  build-linux:
    name: build-linux
    runs-on: ubuntu-latest
    needs: CreateRelease
    steps:
      - uses: actions/checkout@v3

      - name: build
        run: |
          sudo apt update \
          && sudo apt install libssl-dev libnghttp2-dev \
          && git submodule update --init
          && cd libhv \
          && ./configure --with-openssl --with-nghttp2 \
          make libhv evpp

      - name: test
        run: |
          make check
          make run-unittest

  build-windows:
    name: build-windows
    runs-on: windows-latest
    needs: CreateRelease
    steps:
      - uses: actions/checkout@v3
      - name: build
        run: |
          git submodule update --init \
          && cd libhv \
          && mkdir cmake-build-win64 \
          && cd cmake-build-win64 \
          && cmake .. -G "Visual Studio 17 2022" -A x64 \
          && cmake --build .

  build-apple:
    name: build-apple
    runs-on: macos-latest
    needs: CreateRelease
    steps:
      - uses: actions/checkout@v3

      - name: build-mac
        run: |
          git submodule update --init \
          && cd libhv \
          && ./configure \
          && make libhv evpp examples unittest

      - name: build-ios
        run: |
          git submodule update --init \
          && cd libhv \
          && mkdir cmake-build-ios \
          && cd cmake-build-ios \
          && cmake .. -G Xcode -DCMAKE_TOOLCHAIN_FILE=../cmake/ios.toolchain.cmake -DPLATFORM=OS -DDEPLOYMENT_TARGET=9.0 -DARCHS="arm64" \
          && cmake --build . --target hv_static --config Release

  RemoveOldRelease:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-apple]
    steps:
      - name: install github-cli
        run: |
          type -p curl >/dev/null || sudo apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: CheckOut
        uses: actions/checkout@v3

      - name: Set APP_VERSION env
        run: |
          APP_VERSION=$(echo ${GITHUB_REF} | rev | cut -d'/' -f 1 | rev ) \
          && echo APP_OLD_VERSION=${APP_VERSION%.*}.$((${APP_VERSION##*.}-1)) >> ${GITHUB_ENV}
          echo APP_OLD_VERSION=${APP_VERSION%.*}.$((${APP_VERSION##*.}-2)) >> ${GITHUB_ENV}
      - name: Remove Old Release
        run: |
          gh release delete ${{ env.APP_OLD_VERSION }} -y \
          && git push origin --delete ${{ env.APP_OLD_VERSION }}
        env:
          GH_TOKEN: ${{ github.token }}
